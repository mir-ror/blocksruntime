#!/usr/bin/env ruby
#
# Copyright (c) 2009-2011 Mark Heily <mark@heily.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

#
# Abstraction for platform-specific system commands and variables
#
class Platform

  attr_reader :host_os, :target_os

  require 'rbconfig'

  def initialize(target_os = Config::CONFIG['host_os'])
    @host_os = Config::CONFIG['host_os']
    @target_os = target_os
  end

  def is_windows?
    @target_os =~ /mswin|mingw/
  end

  def rm(path)
    if path.kind_of?(Array)
        path = path.join(' ')
    end
    if self.is_windows?
      return 'del /F ' + path
    else
      return 'rm -f ' + path
    end
  end

  def cp(src,dst)
    if src.kind_of?(Array)
      src = src.join(' ')
    end

    if self.is_windows?
      return "copy #{src} #{dst}"
    else
      return "cp #{src} #{dst}"
    end
  end

  def dev_null
    self.is_windows? ? ' >NUL 2>NUL' : ' >/dev/null 2>&1'
  end

  # The extension used for executable files 
  def executable_extension
    self.is_windows? ? '.exe' : ''
  end

  # The extension used for intermediate object files 
  def object_extension
    self.is_windows? ? '.obj' : '.o'
  end

end

class Compiler
  require 'tempfile'
  attr_reader :ldflags, :cflags, :path
  attr_accessor :platform, :subdir, :is_library, :is_shared, :is_makefile, :sources

  def initialize(platform, language, extension, ldflags = '', cflags = '', ldadd = '', subdir = '')
    @platform = platform
    @language = language
    @extension = extension
    @cflags = cflags
    @ldflags = ldflags
    @subdir = subdir
    @ldadd = ldadd
    @is_library = false
    @is_shared = false
    @is_makefile = false        # if true, the output will be customized for use in a Makefile
  end

  def clone
    Marshal.load(Marshal.dump(self))
  end

  # Search for a suitable compiler
  def search(path)
    res = nil
    printf "checking for a " + @language + " compiler.. "
    if ENV['CC']
      res = ENV['CC']
    elsif (path)
      res = path
    else
      throw 'fixme'
    end

    if @platform.is_windows?
        res = 'cl.exe'
        help = ' /? <NUL'
    else
        help = ' --help'
    end
    
    # Verify the command can be executed
    cmd = res + help + @platform.dev_null
    unless system(cmd)
       puts "not found"
       raise
    end

    puts res
    @path = res
  end

  # Return the intermediate object files for each source file
  def objs
    o = @platform.object_extension
    @sources.map { |s| s.sub(/.c$/, (@is_shared ? o : '-static' + o)) }
  end

  # Return the complete command line to compile an object
  def command(output, extra_cflags = "", log_to = "", compile_only = 0)
    cflags = @cflags + extra_cflags
    cflags += ' -c' if compile_only == 1 or @is_library
    cflags += ' -o ' + output unless @is_makefile
    cflags += ' -fPIC' if @is_library and @is_shared
    
    # Prepend @subdir to each input file
    if sources.kind_of?(Array)
      inputs = sources
    else
      inputs = [ sources ] 
    end
    inputs = inputs.collect { |x| @subdir + x }

    # In a Makefile command, the sources are not listed explicitly
    if @is_makefile
      inputs = ''
    end
       
    [ @path, cflags, inputs, @ldadd, log_to ].join(' ')
  end

  # Compile a test program
  def test_compile(code)
    f = Tempfile.new(['testprogram', '.' + @extension]);
    f.print code
    f.flush
    objfile = f.path + '.out'
    cmd = command(objfile, f.path, @platform.dev_null, 1)
#puts ' + ' + cmd + "\n"
    rc = system cmd
    File.unlink(objfile) if rc
    return rc
  end
end

class CCompiler < Compiler

  attr_accessor :output_type

  def initialize(platform)
    @output_type = nil
    super(platform, 'C', '.c')
    search('/usr/bin/cc')
  end

end

class Target
  def initialize(objs, deps = [], rules = [], subdir = '')
      deps = [ deps ] unless deps.kind_of?(Array)
      rules = [ rules ] unless rules.kind_of?(Array)
      @objs = objs
      @deps = deps
      @rules = rules
      @subdir = subdir
  end

  def add_dependency(depends)
    @deps.push(depends)
  end

  def add_rule(rule)
    @rules.push(rule)
  end

  def prepend_rule(target,rule)
    @rules.unshift(rule)
  end

  def to_s
    res = "\n" + @objs + ':'
    res += ' ' + @deps.join(' ') if @deps
    res += "\n"
    @rules.each { |r| res += "\t" + r + "\n" }
    res
  end

end

class Makefile
  def initialize(platform, project, version, subdir)
    @platform = platform
    @project = project
    @version = version
    @vars = {}
    @targets = {}
    @subdir = subdir

    %w[all clean distclean install uninstall distdir].each do |x|
        @targets[x] = Target.new(objs = x, subdir = subdir)
    end
  end

  def define_variable(lval,op,rval)
    @vars[lval] = [ op, rval ]
  end

  def add_target(object,depends,rules)
    @targets[object] = Target.new(object,depends,rules,@subdir)
  end

  def add_rule(target, rule)
    @targets[target].add_rule(rule)
  end

  # Add a file to the tarball during 'make dist'
  def distribute(path)
    @targets['distdir'].add_rule(@platform.cp(path, '$(distdir)'))
  end

  # Add a file to be removed during 'make clean'
  def clean(path)
    @targets['clean'].add_rule(@platform.rm(path))
  end

  def add_dependency(target,depends)
    @targets[target].add_dependency(depends)
  end

  def add_deliverable(src,dst,rename = False)
    add_rule('install', '$(INSTALL) -m 644 ' + $src + ' $(DESTDIR)' + $dst)
    if (rename) 
      add_rule('uninstall', @platform.rm('$(DESTDIR)' + $dst))
    else 
      raise "FIXME"
#add_rule('uninstall', @platform.rm('$(DESTDIR)' + $dst + '/' . basename($src)));
    end 
  end

  def add_distributable(src)
    mode = '755' #TODO: test -x src, use 644 
    #FIXME:
    # add_rule('dist', "$(INSTALL) -m %{mode} %{src} %{self.distdir}")
  end

  def to_s
    res = ''
    make_dist
    @vars.sort.each { |x,y| res += x + y[0] + y[1] + "\n" }
    res += "\n\n"
    res += "default: all\n"
    @targets.sort.each { |x,y| res += y.to_s }
    res
  end

  private

  def make_dist
    return if @subdir
    distdir = @project + '-' + @version
    tg = Target.new('dist')
    tg.add_rule("rm -rf " + distdir)
    tg.add_rule("mkdir " + distdir)
    tg.add_rule('$(MAKE) distdir distdir=' + distdir)
    @targets['dist'] = tg
  end

end

# A buildable object like a library or executable
class Buildable

  def initialize(id, ast, compiler, makefile)
    @id = id
    @ast = ast
    @compiler = compiler.clone
    @makefile = makefile
    @output = []
    default = {
        'extension' => '',
        'cflags' => '', # TODO: pull from project
        'ldflags' => '', # TODO: pull from project
        'ldadd' => '', # TODO: pull from project
        'sources' => [],
        'depends' => [],
    }
    default.each do |k,v| 
      instance_variable_set('@' + k, ast[k].nil? ? v : ast[k])
    end
  end

  def build
    @makefile.clean(@output)
    @makefile.distribute(@sources)
    @makefile.add_dependency('all', @output)
  end

end

class Library < Buildable

  def initialize(id, ast, compiler, makefile)
    super(id, ast, compiler, makefile)
    default = {
        'abi_major' => '0',
        'abi_minor' => '0',
        'enable_shared' => true,
        'enable_static' => true,
        'headers' => [],
    }
    default.each do |k,v| 
      instance_variable_set('@' + k, ast[k].nil? ? default[k] : ast[k])
    end
  end

  def build
    build_static_library
    build_shared_library
    super()
  end

  private

  def build_static_library
    libfile = @id + '.a'
    cc = @compiler.clone
    cc.is_library = true
    cc.is_shared = false
    cc.is_makefile = true
    cc.sources = @sources
    cmd = cc.command(libfile, cflags = @cflags)
    deps = cc.objs.sort
    deps.each do |d| 
      src = d.sub(/-static#{@compiler.platform.object_extension}$/, '.c')
      @makefile.add_target(d, src, cmd + ' -o ' + d + ' ' + src) 
    end
    @makefile.add_target(libfile, deps, 'ar rs ' + libfile + ' ' + deps.join(' '))
    @makefile.clean(cc.objs)
    @output.push libfile
  end

  def build_shared_library
    libfile = @id
    if @compiler.platform.is_windows?
       libfile += '.dll'
    else
       libfile += '.so'
    end
    cc = @compiler.clone
    cc.is_library = true
    cc.is_shared = true
    cc.is_makefile = true
    cc.sources = @sources
    cmd = cc.command(libfile, cflags = @cflags)
    deps = cc.objs.sort
    deps.each do |d| 
      src = d.sub(/#{@compiler.platform.object_extension}$/, '.c')
      @makefile.add_target(d, src, cmd + ' ' + src) 
    end
    @makefile.add_target(libfile, deps, '$(CC) -shared -o $@ ' + deps.join(' '))
    @makefile.clean(cc.objs)
    @output.push libfile
  end

end

# An executable binary file
class Binary < Buildable

  def initialize(id, ast, compiler, makefile)
    super(id, ast, compiler, makefile)
  end

  def build
    binfile = @id + @compiler.platform.executable_extension
    @makefile.add_target(binfile, @depends, @compiler.command(binfile, @sources))
    super()
  end
          
end

class Header

  def initialize(path, compiler)
    @path = path
    @compiler = compiler
    @exists = check_exists
  end

  def check_exists
    printf "checking for #{@path}... "
    rc = @compiler.test_compile("#include <" + @path + ">")
    puts rc ? 'yes' : 'no'
    rc
  end

  def exists?
    @exists
  end

  def to_config_h
     id = @path.upcase.gsub(%r{[.-]}, '_')
     if @exists
       "#define HAVE_" + id + " 1\n"
     else
       "#undef  HAVE_" + id + "\n" 
     end
  end
     
end

class Project

  require 'yaml'

  def initialize(manifest, subdir = '')
    @subdir = subdir
    @ast = parse(manifest)
    @platform = Platform.new()
    @cc = CCompiler.new(@platform)
    @mf = Makefile.new(@platform, @ast['project'], @ast['version'].to_s, subdir)
    @header = {}
    
    # Include subprojects
    @subproject = {}
    @ast['subdirs'].each do |x| 
      @subproject[x] = Project.new(subdir + x + '/config.yaml', subdir + x + '/') 
    end

    # Define Makefile variables
    @mf.define_variable('MAKE', '=', 'make')
    @mf.define_variable('CFLAGS', '=', 'todo')
    @mf.define_variable('LDFLAGS', '=', 'todo')
    @mf.define_variable('LDADD', '=', 'todo')
    @mf.define_variable('CC', '=', @cc.path)

    check_headers
    make_libraries
    make_binaries
    write_config_h
    write_makefile
  end

  private

  def parse(manifest)
    default = {
        'subdirs' => [],
        'libraries' => [],
        'binaries' => [],
        'check_header' => [],
    }
    ast = YAML.load_file(manifest)
    default.each { |k,v| ast[k] ||= v }
    ast
  end

  def check_headers
    @ast['check_header'].each do |h|
        @header[h] = Header.new(h, @cc)
     end
  end

  def make_libraries
    @ast['libraries'].each do |k,v|
        Library.new(k, v, @cc, @mf).build
    end
  end

  def make_binaries
    @ast['binaries'].each do |k,v|
        Binary.new(k, v, @cc, @mf).build
    end
  end

  def write_makefile
    ofile = @subdir + 'Makefile'
    puts 'writing ' + ofile
    f = File.open(ofile, 'w')
    f.print "# AUTOMATICALLY GENERATED -- DO NOT EDIT\n"
    f.print @mf.to_s
    f.close
  end

  def write_config_h
    ofile = @subdir + 'config.h'
    puts 'Creating ' + ofile
    f = File.open(ofile, 'w')
    f.print "/* AUTOMATICALLY GENERATED -- DO NOT EDIT */\n"
    @header.each { |k,v| f.print v.to_config_h }
    f.close
  end

end

#######################################################################
#
#                               MAIN()
#

#TODO:
#require 'logger'
#File.unlink('config.log')
#log = Logger.new('config.log')

proj = Project.new('config.yaml')
